#+TITLE: DTOS
#+PROPERTY: header-args :tangle dtos
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#shebang-plus-comments][Shebang plus comments]]
- [[#check-that-user-is-not-root][Check that user is NOT root!]]
- [[#a-function-for-errors][A function for errors]]
- [[#sync-the-repos-and-install-dialog][Sync the repos and install 'dialog']]
- [[#welcome-message][Welcome message]]
- [[#warning-the-user-about-potential-problems][Warning the user about potential problems]]
- [[#confirming-locales-are-set][Confirming locales are set]]
- [[#asking-user-to-confirm-choice-to-install-dtos][Asking user to confirm choice to install DTOS.]]
- [[#adding-dtos-repo-to-pacmanconf][Adding DTOS repo to pacman.conf.]]
- [[#adding-keyservers-to-gpgconf][Adding keyservers to gpg.conf.]]
- [[#receiving-the-pgp-key][Receiving the PGP key]]
- [[#install-the-packages-from-repositories][Install the packages from repositories]]
- [[#copy-configs-over-from-etcdtos-into-home][Copy configs over from /etc/dtos into $HOME]]
- [[#install-other-package][Install other package]]
- [[#install-doom-emacs][Install Doom Emacs]]
- [[#copy-pacman-hooks][Copy pacman hooks]]
- [[#compiling-xmonad][Compiling xmonad]]
- [[#compiling-the-xmonadctl-script][Compiling the xmonadctl script]]
- [[#set-default-user-shell][Set default USER shell]]
- [[#message-stating-that-the-installation-is-complete][Message stating that the installation is complete!]]

* Shebang plus comments
#+begin_src bash :shebang "#!/usr/bin/env bash"

# DESC: An installation and deployment script for DT's Xmonad desktop.
# WARNING: Run this script at your own risk.
# DEPENDENCIES: dialog
#+end_src
* Check that user is NOT root!
Don't run this script as root!  This is done for safety reasons.  This script makes a lot of changes to the $HOME of the $USER of this script.  For obvious reasons, we want $USER to not be 'root' and $HOME not to be '/root'.  Instead, run this script as a normal user.  You will be asked to enter a sudo password at several points during the installation.

#+begin_src bash
if [ "$(id -u)" = 0 ]; then
    echo "##################################################################"
    echo "This script MUST NOT be run as root user since it makes changes"
    echo "to the \$HOME directory of the \$USER executing this script."
    echo "The \$HOME directory of the root user is, of course, '/root'."
    echo "We don't want to mess around in there. So run this script as a"
    echo "normal user. You will be asked for a sudo password when necessary."
    echo "##################################################################"
    exit 1
fi
#+end_src

* A function for errors
#+begin_src bash
error() { \
    clear; printf "ERROR:\\n%s\\n" "$1" >&2; exit 1;
}
#+end_src

* Sync the repos and install 'dialog'
#+begin_src bash
echo "################################################################"
echo "## Syncing the repos and installing 'dialog' if not installed ##"
echo "################################################################"
sudo pacman --noconfirm --needed -Syu dialog || error "Error syncing the repos."
#+end_src

* Welcome message
#+begin_src bash
welcome() { \
    dialog --colors --title "\Z7\ZbInstalling DTOS!" --msgbox "\Z4This is a script that will install what I sarcastically call DTOS (DT's operating system).  It's really just an installation script for those that want to try out my tiling window manager configurations and associated programs.  You will be asked to enter your sudo password at various points during this installation, so stay near the computer.\\n\\n-DT (Derek Taylor, aka DistroTube)" 16 60
}

welcome || error "User choose to exit."
#+end_src

* Warning the user about potential problems
#+begin_src bash
speedwarning() { \
    dialog --colors --title "\Z7\ZbInstalling DTOS!" --yes-label "Continue" --no-label "Exit" --yesno  "\Z4WARNING! The ParallelDownloads option is not enabled in /etc/pacman.conf. This may result in slower installation speeds. Are you sure you want to continue?" 16 60 || error "User choose to exit."
}

distrowarning() { \
    dialog --colors --title "\Z7\ZbInstalling DTOS!" --yes-label "Continue" --no-label "Exit" --yesno  "\Z4WARNING! While this script works on all Arch based distros, some distros choose to package certain things that we also package, please look at the package list and remove conflicts manually. Are you sure you want to continue?" 16 60 || error "User choose to exit."
}

grep -qs "#ParallelDownloads" /etc/pacman.conf && speedwarning
grep -qs "ID=arch" /etc/os-release || distrowarning
#+end_src

* Confirming locales are set
#+begin_src bash
localewarning() { \
        [[ -z $LANG || -z $LC_CTYPE ]] && \
        dialog --colors --title "\Z7\ZbInstalling DTOS!" --msgbox "\Z4WARNING! Your locales have not been set! Please check that both the LANG and LC_CTYPE variables are set to the appropriate locale in /etc/locale.conf (NOTE: they should both be the same). Run 'sudo locale-gen', reboot and run the script again. You can reference the Arch Wiki while doing so: https://wiki.archlinux.org/title/locale" 16 60 && error "Your locales have not been set! Please check that both the LANG and LC_CTYPE variables are set to the appropriate locale in /etc/locale.conf (NOTE: they should both be the same). Run 'sudo locale-gen', reboot and run the script again. You can reference the Arch Wiki while doing so: https://wiki.archlinux.org/title/locale"
}

localewarning
#+end_src

* Asking user to confirm choice to install DTOS.
#+begin_src bash
lastchance() { \
    dialog --colors --title "\Z7\ZbInstalling DTOS!" --msgbox "\Z4WARNING! The DTOS installation script is currently in public beta testing. There are almost certainly errors in it; therefore, it is strongly recommended that you not install this on production machines. It is recommended that you try this out in either a virtual machine or on a test machine." 16 60

    dialog --colors --title "\Z7\ZbAre You Sure You Want To Do This?" --yes-label "Begin Installation" --no-label "Exit" --yesno "\Z4Shall we begin installing DTOS?" 8 60 || { clear; exit 1; }
}

lastchance || error "User choose to exit."
#+end_src

* Adding DTOS repo to pacman.conf.
#+begin_src bash
addrepo() { \
    echo "#########################################################"
    echo "## Adding the DTOS core repository to /etc/pacman.conf ##"
    echo "#########################################################"
    grep -qxF "[dtos-core-repo]" /etc/pacman.conf ||
        ( echo " "; echo "[dtos-core-repo]"; echo "SigLevel = Required DatabaseOptional"; \
        echo "Server = https://gitlab.com/dtos/\$repo/-/raw/main/\$arch") | sudo tee -a /etc/pacman.conf
}

addrepo || error "Error adding DTOS repo to /etc/pacman.conf."
#+end_src

* Adding keyservers to gpg.conf.
#+begin_src bash
addkeyserver() { \
    echo "#######################################################"
    echo "## Adding keyservers to /etc/pacman.d/gnupg/gpg.conf ##"
    echo "#######################################################"
    grep -qxF "keyserver.ubuntu.com:80" /etc/pacman.d/gnupg/gpg.conf || echo "keyserver hkp://keyserver.ubuntu.com:80" | sudo tee -a /etc/pacman.d/gnupg/gpg.conf
    grep -qxF "keyserver.ubuntu.com:443" /etc/pacman.d/gnupg/gpg.conf || echo "keyserver hkps://keyserver.ubuntu.com:443" | sudo tee -a /etc/pacman.d/gnupg/gpg.conf
}

addkeyserver || error "Error adding keyservers to /etc/pacman.d/gnupg/gpg.conf"
#+end_src

* Receiving the PGP key
#+begin_src bash
receive_key() { \
    local _pgpkey="A62D56CABD8DD76E"
    echo "#####################################"
    echo "## Adding PGP key $_pgpkey ##"
    echo "#####################################"
    sudo pacman-key --recv-key $_pgpkey
    sudo pacman-key --lsign-key $_pgpkey
}

receive_key || error "Error receiving PGP key $_pgpkey"
#+end_src


* Install the packages from repositories
All packages listed are either in the standard Arch repos or in the DTOS repos.  All of these will be installed using pacman.  The only program that will not be installed through pacman is Doom Emacs, which will be installed later in the script.

=NOTE:= The '--ask 4' option is an undocumented option for pacman that can be found in pacman's source code (in pacman's alpm.h).  Adding this flags means that all questions about removing packages that are conflicts will automatically be answered YES.

#+begin_src bash
# Let's install each package listed in the pkglist.txt file.
sudo pacman --needed --ask 4 -Sy - < pkglist.txt || error "Failed to install required packages."
#+end_src

* Copy configs over from /etc/dtos into $HOME
While it would be easier to make packages that could install DTOS configs directly to the appropriate places in the $HOME folder, pacman does not allow for this.  Pacman is not allowed to touch $HOME ever!  The better way to do this is to install the configs in /etc/skel which is the standard directory to place such config files, but on many distros (for ex. Manjaro and Arco) /etc/skel is already used to store the distro's own config files.  So to avoid conflicts, all DTOS configs are placed in /etc/dtos and then copied over to $HOME.  A backup of config is created.  BEWARE!

=NOTE:= The /etc/dtos directory contains files and directories that are automatically copied over to a new user's home directory when such user is created by the 'useradd' or the 'adduser' program, depending on your Linux distro.
#+begin_src bash
echo "################################################################"
echo "## Copying DTOS configuration files from /etc/dtos into \$HOME ##"
echo "################################################################"
cd ~ && git clone https://github.com/angel-altuve/dotfiles.git
cp -r ~/dotfiles/.config ~/
cp -r ~/dotfiles/.local/bin ~/.local/
cp ~/dotfiles/.xinitrc ~/
cp ~/dotfiles/.Xresources ~/
cp ~/dotfiles/.Xmodmap ~/
cp ~/dotfiles/.moc ~/
cp ~/dotfiles/.nano ~/
cp ~/dotfiles/.nanorc ~/
cp ~/dotfiles/.tmux ~/
cp ~/dotfiles/.tmux.conf.local ~/
cp ~/dotfiles/.bashrc ~/
cp ~/dotfiles/.bash_profile ~/

#+end_src

#+begin_src bash
# Change all scripts in .local/bin to be executable.
find $HOME/.local/bin -type f -print0 | xargs -0 chmod 775
#+end_src

* Install other package
#+begin_src haskell
sudo pacman -Sy dunst noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra npm nodejs moc neofetch htop github-cli acpid duf ncdu telegram-desktop wget curl tmux sd vifm ueberzug diff-so-fancy gvfs
#+end_src
* Install Doom Emacs
#+begin_src bash
echo "#########################################################"
echo "## Installing Doom Emacs. This may take a few minutes. ##"
echo "#########################################################"
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
~/.emacs.d/bin/doom --force install
~/.emacs.d/bin/doom sync
#+end_src

* Copy pacman hooks
The following pacman hooks force xmonad to recompile every time there are updates to xmonad or the haskell libraries.
#+begin_src bash
[ ! -d /etc/pacman.d/hooks ] && sudo mkdir /etc/pacman.d/hooks
sudo cp /etc/dtos/.config/xmonad/pacman-hooks/recompile-xmonad.hook /etc/pacman.d/hooks/
sudo cp /etc/dtos/.config/xmonad/pacman-hooks/recompile-xmonadh.hook /etc/pacman.d/hooks/
#+end_src

* Compiling xmonad
=NOTE:= May not be needed if moving the pacman hooks works as expected.
#+begin_src bash
xmonad_recompile() { \
    echo "########################"
    echo "## Recompiling XMonad ##"
    echo "########################"
    xmonad --recompile
}

xmonad_recompile || echo "Recompiling Xmonad failed!"
#+end_src

* Compiling the xmonadctl script
#+begin_src bash
xmonadctl_compile() { \
    echo "####################################"
    echo "## Compiling the xmonadctl script ##"
    echo "####################################"
    ghc -dynamic "$HOME"/.config/xmonad/xmonadctl.hs
}

xmonadctl_compile || echo "Compiling the xmonadctl script failed!"
#+end_src

* Set default USER shell
#+begin_src bash
            sudo chsh $USER -s "/bin/fish" && \
            echo -e "$choice has been set as your default USER shell. \
                    \nLogging out is required for this take effect."
#+end_src


* Message stating that the installation is complete!
#+begin_src bash
echo "##############################"
echo "## DTOS has been installed! ##"
echo "##############################"

while true; do
    read -p "Do you want to reboot to get your dtos? [Y/n] " yn
    case $yn in
        [Yy]* ) startx;;
        [Nn]* ) break;;
        "" ) startx;;
        * ) echo "Please answer yes or no.";;
    esac
done
#+end_src
